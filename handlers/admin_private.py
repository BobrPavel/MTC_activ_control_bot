from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import (
    orm_add_card,
    orm_get_card,
    orm_get_cards,
    orm_get_players2,
    orm_update_card,
    orm_delete_card,
    orm_add_player,
    orm_change_player,
    orm_get_player,
    orm_get_players,
    orm_delete_player,
    orm_update_player_minus,
    orm_update_player_plus,
    orm_change_status_player,
    orm_get_status,
)

from filters.chat_types import ChatTypeFilter, IsAdmin

from kbds.inline import get_callback_btns
from kbds.reply import get_keyboard, del_reply_kd


admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


ADMIN_KB = get_keyboard(
    "–ö–∞—Ä—Ç–æ—á–∫–∏",
    "–ò–≥—Ä–æ–∫–∏",
    "–û—Ç—á—ë—Ç—ã",
    "–ö–æ–Ω—Ç—Ä–æ–ª—å",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(2, 2),
)

################################# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã #################################


@admin_router.message(Command("admin"))
async def admin_on(message: types.Message):
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=ADMIN_KB)


@admin_router.message(Command("off"))
async def admin_off(message: types.Message):
    await message.answer("–ê–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞", reply_markup=del_reply_kd)


@admin_router.message(F.text == "–ö–∞—Ä—Ç–æ—á–∫–∏")
async def admin_cards(message: types.Message):
    await message.answer(
        "–°—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É. "
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–≤–µ–¥–∏—Ç–µ card_[–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏]",
        reply_markup=get_callback_btns(
            btns={
                "–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞": "add-new-card",
                "–°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫": "card-list",
            },
            sizes=(2,),
        ),
    )


@admin_router.message(F.text == "–ò–≥—Ä–æ–∫–∏")
async def admin_players(message: types.Message):
    await message.answer(
        "–°—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–∫–∞–º–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É."
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤–≤–µ–¥–∏—Ç–µ player_[–ø–æ–∑—ã–≤–Ω–æ–π –∏–≥—Ä–æ–∫–∞]",
        reply_markup=get_callback_btns(
            btns={
                "–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫": "add-new-player",
                "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤": "players-list",
            },
            sizes=(2,),
        ),
    )


@admin_router.message(F.text == "–û—Ç—á—ë—Ç—ã")
async def admin_reports(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç",
        reply_markup=get_callback_btns(
            btns={
                "–ù–æ—Ä–º–∞": f"report_{1}",
                "–û—Ç–ø—É—Å–∫–∞": f"report_{2}",
                "–ö–∞–∑–Ω—å": f"report_{3}",
            },
            sizes=(1, 2),
        ),
    )


################################################################################################
################################# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã ( –∫–∞—Ä—Ç–æ—á–∫–∏ ) #################################


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
@admin_router.callback_query(F.data == "card-list")
async def list_of_cards(callback: types.CallbackQuery, session: AsyncSession):
    cards = await orm_get_cards(session)
    if not cards:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—É—Å—Ç.")
        return

    text = "\n".join(card.name for card in cards)
    await callback.message.answer(f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫:\n\n{text}")


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∏–º–µ–Ω–∏
@admin_router.message(F.text.startswith("card_"))
async def card_show(message: types.Message, session: AsyncSession):
    name = message.text.removeprefix("card_")
    card = await orm_get_card(session, name)

    if not card:
        await message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∏–º–µ–Ω–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    keyboard = get_callback_btns(
        btns={
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å": f"change-—Åard_{card.name}",
            "–£–¥–∞–ª–∏—Ç—å": f"delete_{card.name}",
        },
        sizes=(2,),
    )

    await message.answer_photo(
        photo=card.image,
        caption=card.name,
        reply_markup=keyboard,
    )


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (FSM)
@admin_router.callback_query(F.data == "add-new-card")
async def add_card(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(AddCard.name)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏",
        reply_markup=types.ReplyKeyboardRemove(),
    )


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
@admin_router.callback_query(F.data.startswith("delete_"))
async def delete_card(callback: types.CallbackQuery, session: AsyncSession):
    name = callback.data.removeprefix("delete_")
    success = await orm_delete_card(session, name)

    if success:
        await callback.message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await callback.message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–µ–Ω–∞.")


@admin_router.callback_query(F.data.startswith("change-card_"))
async def start_edit_card(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    name = callback.data.split("_")[-1]
    card = await orm_get_card(session, name)
    await state.update_data(item_for_change=card, original_key=name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:")
    await state.set_state(AddCard.name)



################################# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã (–∏–≥—Ä–æ–∫–∏) #################################


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
@admin_router.callback_query(F.data == "players-list")
async def list_of_players(callback: types.CallbackQuery, session: AsyncSession):
    players = await orm_get_players(session)

    if not players:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.")
        return

    text = "\n".join(player.name for player in players)
    await callback.message.answer(f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n\n{text}")


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ
@admin_router.message(F.text.startswith("player_"))
async def show_player_info(message: types.Message, session: AsyncSession):
    player_name = message.text.removeprefix("player_")
    player = await orm_get_player(session, player_name)

    if not player:
        await message.answer(f"–ò–≥—Ä–æ–∫ —Å –ø–æ–∑—ã–≤–Ω—ã–º '{player_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = f"{player.name} | {player.count} | {player.direction.name} | {player.statuses.name}."
    keyboard = get_callback_btns(
        btns={
            "üîÑ –ø–æ–∑—ã–≤–Ω–æ–π": f"change-player_{player.name}",
            "üîÑ —Å—Ç–∞—Ç—É—Å": f"change-status_{player.name}",
            "‚ùå –£–¥–∞–ª–∏—Ç—å": f"delete-player_{player.name}",
        },
        sizes=(2, 1),
    )

    await message.answer(text, reply_markup=keyboard)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (FSM)
@admin_router.callback_query(F.data == "add-new-player")
async def add_new_player(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(AddUser.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π", reply_markup=types.ReplyKeyboardRemove())


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑—ã–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (FSM)
@admin_router.callback_query(F.data.startswith("change-player_"))
async def change_player_name(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    player_name = callback.data.removeprefix("change-player_")
    player = await orm_get_player(session, player_name)

    if not player:
        await callback.message.answer(f"–ò–≥—Ä–æ–∫ '{player_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    AddUser.user_for_change = player
    AddUser.player_name = player_name

    await state.set_state(AddUser.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∑—ã–≤–Ω–æ–π", reply_markup=types.ReplyKeyboardRemove())


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ)
@admin_router.callback_query(F.data.startswith("change-status_"))
async def change_player_status(callback: types.CallbackQuery, session: AsyncSession):
    player_name = callback.data.removeprefix("change-status_")
    player = await orm_get_player(session, player_name)

    if not player:
        await callback.message.answer(f"–ò–≥—Ä–æ–∫ '{player_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏ 1 –∏ 2
    new_status = 2 if player.statuses_id == 1 else 1
    await orm_change_status_player(session, player_name, new_status)

    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")


# –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
@admin_router.callback_query(F.data.startswith("delete-player_"))
async def delete_player(callback: types.CallbackQuery, session: AsyncSession):
    player_name = callback.data.removeprefix("delete-player_")
    success = await orm_delete_player(session, player_name)

    if success:
        await callback.message.answer(f"–ò–≥—Ä–æ–∫ '{player_name}' —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.message.answer(f"–ò–≥—Ä–æ–∫ '{player_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª—ë–Ω.")


@admin_router.callback_query(F.data.startswith("change-user_"))
async def start_edit_user(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    name = callback.data.split("_")[-1]
    user = await orm_get_user(session, name)
    await state.update_data(item_for_change=user, original_key=name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∑—ã–≤–Ω–æ–π:")
    await state.set_state(AddUser.name)


################################# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π FSM) #################################


class AddCard(StatesGroup):
    name = State()
    image = State()

    text = {
        "AddCard:name": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:",
        "AddCard:image": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏.",
    }


class AddUser(StatesGroup):
    name = State()

    text = {
        "AddUser:name": "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π –∏–≥—Ä–æ–∫–∞:",
    }


################################# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π FSM (–æ—Ç–º–µ–Ω–∞/–Ω–∞–∑–∞–¥)) #################################


@admin_router.message(StateFilter("*"), Command("–æ—Ç–º–µ–Ω–∞"))
@admin_router.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ADMIN_KB)


@admin_router.message(StateFilter("*"), Command("–Ω–∞–∑–∞–¥"))
@admin_router.message(StateFilter("*"), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_step_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if not current_state:
        return

    all_states = AddCard.__all_states__ + AddUser.__all_states__
    previous = None
    for step in all_states:
        if step.state == current_state:
            if previous:
                await state.set_state(previous)
                state_texts = getattr(step.group, "text", {})
                text = state_texts.get(previous.state, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.")
                await message.answer(text)
            else:
                await message.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ.")
            return
        previous = step


# —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä name
@admin_router.message(F.text, StateFilter(AddCard.name, AddUser.name))
async def handle_name_input(message: types.Message, state: FSMContext, session: AsyncSession):
    state_name = await state.get_state()
    state_group = AddCard if state_name.startswith("AddCard") else AddUser

    text = message.text.strip()
    if not (3 <= len(text) <= 150):
        await message.answer("–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(name=text)


    if state_group is AddCard:
        await message.answer(state_group.text.get(f"{state_group.__name__}:image", "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥."))
        await state.set_state(AddCard.image)
    else:
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ ‚Äî —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        await save_entity(state_group, message, state, session)


# —Ö—ç–µ–Ω–¥–ª–µ—Ä image
@admin_router.message(AddCard.image, or_f(F.photo, F.text == "."))
async def handle_card_image(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.photo:
        await state.update_data(image=message.photo[-1].file_id)
    elif message.text == ".":
        data = await state.get_data()
        if "item_for_change" in data:
            await state.update_data(image=data["item_for_change"].get("image"))
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏.")
        return

    await save_entity(AddCard, message, state, session)


# –æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
async def save_entity(state_group, message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    item_for_change = data.get("item_for_change")
    original_key = data.get("original_key")

    try:
        if item_for_change:
            if state_group is AddCard:
                await orm_update_card(session, original_key, data)
            elif state_group is AddUser:
                await orm_change_player(session, original_key, data)
        else:
            if state_group is AddCard:
                await orm_add_card(session, data)
            elif state_group is AddUser:
                await orm_add_player(session, data)

        await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=ADMIN_KB)
    except IntegrityError:
        await message.answer("–û–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    finally:
        await state.clear()


############################################################################################
################# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏ ############################


@admin_router.callback_query(F.data.startswith("report_"))
async def report_cmd(callback: types.CallbackQuery, session: AsyncSession):
    try:
        status_id = int(callback.data.removeprefix("report_"))
    except ValueError:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return


    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status = await orm_get_status(session, status_id)
    header = f"üìù –û—Ç—á—ë—Ç –ø–æ –ª–∏—á–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤—É –¢—Ä–∏–æ–∑—ë—Ä—Å–∫–∞\n–°—Ç–∞—Ç—É—Å: {status.name}\n\n"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    players = await orm_get_players(session, status_id)
    if not players:
        await callback.message.answer(header + "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    players_list = "\n".join(
        f"{player.name} | {player.count} | {player.direction.name}" for player in players
    )

    await callback.message.answer(header + players_list)



################# FSM –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è ############################


class ActivControlFSM(StatesGroup):
    name = State()
    id = State()

# ‚úÖ –°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥—ã "–ö–æ–Ω—Ç—Ä–æ–ª—å"
@admin_router.message(F.text == "–ö–æ–Ω—Ç—Ä–æ–ª—å")
async def start_control(message: types.Message, state: FSMContext, session: AsyncSession):
    players = await orm_get_players2(session)
    await state.update_data(all_players=players, selected=[], result=[])

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞", 
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(ActivControlFSM.name)


# ‚úÖ –û—Ç–º–µ–Ω–∞
@admin_router.message(ActivControlFSM.name, F.data == "cancel_activ")
@admin_router.message(ActivControlFSM.id, F.data == "cancel_activ")
async def cancel_control(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ADMIN_KB)


# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
@admin_router.message(ActivControlFSM.name, F.text)
async def add_player(message: types.Message, state: FSMContext):
    data = await state.get_data()
    player = message.text

    if player in data["all_players"]:
        selected = data.get("selected", [])
        if player not in selected:
            selected.append(player)
            await state.update_data(selected=selected)
        
        await message.answer(
            "–ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.",
            reply_markup=get_callback_btns(
                btns={"–ó–∞–≤–µ—Ä—à–∏—Ç—å": "+", "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—ë": "cancel_activ"},
                sizes=(2,)
            )
        )
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –∏–ª–∏ –æ–Ω –≤ –æ—Ç–ø—É—Å–∫–µ.")


# ‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–¥–∞–ª–∏—Ç—å
@admin_router.callback_query(F.data == "+")
async def show_selected(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    selected = data.get("selected", [])
    all_players = data.get("all_players", [])

    # –í—ã—á–∏—Å–ª—è–µ–º result
    result = [p for p in all_players if p not in selected]
    await state.update_data(result=result)

    text = "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for idx, name in enumerate(selected):
        text += f"[{idx}] {name}\n"
    text += "\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ ‚Äî –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä."

    await callback.message.answer(
        text,
        reply_markup=get_callback_btns(
            btns={"–í—ã–ø–æ–ª–Ω–∏—Ç—å": "perform", "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—ë": "cancel_activ"},
            sizes=(2,)
        )
    )
    await state.set_state(ActivControlFSM.id)


# ‚úÖ –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@admin_router.message(ActivControlFSM.id, F.text.regexp(r"^\d+$"))
async def remove_player(message: types.Message, state: FSMContext):
    index = int(message.text)
    data = await state.get_data()
    selected = data.get("selected", [])

    if 0 <= index < len(selected):
        removed = selected.pop(index)
        await state.update_data(selected=selected)
        await message.answer(
            f"–ò–≥—Ä–æ–∫ {removed} —É–¥–∞–ª—ë–Ω. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.",
            reply_markup=get_callback_btns(
                btns={"–ó–∞–≤–µ—Ä—à–∏—Ç—å": "+", "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—ë": "cancel_activ"},
                sizes=(2,)
            )
        )
        await state.set_state(ActivControlFSM.name)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞.")


# ‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
@admin_router.callback_query(StateFilter(ActivControlFSM.id), F.data == "perform")
async def perform_control(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    await orm_update_player_plus(session, data["result"])
    await orm_update_player_minus(session, data["selected"])

    await state.clear()
    await callback.message.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=ADMIN_KB)